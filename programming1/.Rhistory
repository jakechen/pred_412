tsdisplay(m2)
m1 <- arima.sim(n=1000, list(ar=c(0.7, -0.49)))
tsdisplay(m1)
m2 <- arima.sim(n=1000, list(ma=c(-0.3, -0.4)))
tsdisplay(m2)
pf(37.044, 2, 427)
1-pf(37.044, 2, 427)
pf(37.044, 2, 427)
pt(3.898, 425)
1-pt(3.898, 425)
1-pt(7.727, 425)
raw = read.csv('Dropbox/MSPA/predict 411/assignments/5/grun_week_5.csv')
head(raw)
raw = read.csv('Dropbox/MSPA/predict 411/assignments/finals/labor_wage.csv')
head(raw)
raw <- raw[,-1]
head(raw)
lapply(raw, log)
raw.log <- lapply(raw, log)
head(raw.log)
x <- lapply(raw, as.character)
str(x)
l_raw <- lapply(raw, log)
str(l_raw)
x <- log(raw)
str(x)
names(raw)
names(raw)[1]
paste(l,names(raw)[1],sep='_')
paste('l',names(raw)[1],sep='_')
l_raw <- log(raw)
apply(names(l_raw), function(x){paste('l',x,sep='_')})
lapply(names(l_raw), function(x){paste('l',x,sep='_')})
names(l_raw) <- lapply(names(l_raw), function(x){paste('l',x,sep='_')})
str(l_raw)
attach(l_raw)
formula <- l_labor ~ l_sch + l_othwag + l_land + l_RE + l_othexp
fit <- lm(formula, l_raw)
summar(fit)
summary(fit)
fit$fitted.values
formula <- l_labor ~ l_sch + l_othwag + l_land + l_RE + l_othexp
fit <- lm(l_labor ~ l_sch + l_othwag + l_land + l_RE + l_othexp, l_raw)
fit$fitted.values
fit <- lm(l_labor ~ l_sch + l_othwag + l_land + l_RE + l_othexp, l_raw)
y_labor_hat <- fit$fitted.values
y_labor_hat
fit <- lm(l_labor ~ l_sch + l_othwag + l_land + l_RE + l_othexp, l_raw)
y_labor_hat <- fit$fitted.values
y_labor_hat
l_raw$l_labor_hat <- fit$fitted.values
l_raw$l_labor_hat
str(l_raw)
fit2 <- lm(l_wage ~ l_labor_hat + l_sch, l_othwag, l_raw)
summary(fit2)
fit2 <- lm(l_wage ~ l_labor_hat + l_sch, l_othwag, l_raw)
fit2 <- lm(l_wage ~ l_labor_hat + l_sch + l_othwag, l_raw)
summary(fit2)
fit2$coefficients
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- 1 + x1 - x2 + rnorm(100)
y
plot(y)
fit <- lm(y~x1+x2)
summary(fit)
y <- 1 + 2*x1 - 5*x2 + rnorm(100)
fit <- lm(y~x1+x2)
summary(fit)
y <- 1 + 2*x1 - 5*x2
fit <- lm(y~x1+x2)
summary(fit)
y <- 1 + 2*x1 - 5*x2 + rnorm(100, 0, 0.01)
fit <- lm(y~x1+x2)
summary(fit)
y <- 1 + 2*x1 - 5*x2 + rnorm(100)
fit <- lm(y~x1+x2)
summary(fit)
r1 <- residuals(lm(y~x2))
r2 <- residuals(lm(x1~x2))
coef(lm(y~x1+x2))
y <- 1 + 2*x1 - 5*x2 + rnorm(100)
r1 <- residuals(lm(y~x2))
r2 <- residuals(lm(x1~x2))
coef(lm(y~x1+x2))
coef(lm(r1~-1+r2))
library(sem)
ov = rnorm(100)
z1 = rnorm(100)
z2 = rnorm(100)
y1 = rnorm(100) + z1 + z2 + 1.5*ov
x1 = rnorm(100) + 0.5*z1 - z2
x2 = rnorm(100)
y2 = 1 + y1 - x1 + 0.3*x2 + ov + rnorm(100)
coef(lm(y2~y1+x1+x2))
y2 = 1 + 5*y1 - x1 + 0.3*x2 + ov + rnorm(100)
coef(lm(y2~y1+x1+x2))
y2 = 1 + 5*y1 - x1 + 0.3*x2 + ov
# biased coef on y1 as expected for ols
coef(lm(y2~y1+x1+x2))
y2 = 1 - x1 + 0.3*x2 + ov
# biased coef on y1 as expected for ols
coef(lm(y2~y1+x1+x2))
y2 = 1 - x1 + 0.3*x2 + ov
# biased coef on y1 as expected for ols
coef(lm(y2~x1+x2))
x <- rnorm(200)
x1 <- x[1:100]
x2 <- x[101:200]
fit2$coefficients
r1 <- residuals(l_wage ~ l_labor)
r1
r1 <- residuals(lm(l_wage ~ l_labor))
r1
r2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
r2
ry <- residuals(lm(l_wage ~ l_labor))
rx2 <- residuals(lm(l_labor ~ l_sch))
rx3 <- residuals(lm(l_labor ~ l_othwag))
coef(lm(ry ~ -1 + rx2 + rx3))
r1 <- residuals(lm(y~x2))
r2 <- residuals(lm(x1~x2))
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- 1 + 2*x1 - 5*x2 + rnorm(100)
r1 <- residuals(lm(y~x2))
r2 <- residuals(lm(x1~x2))
coef(lm(y~x1+x2))
# FWL
coef(lm(r1~-1+r2))
coef(lm(r1~r2))
coef(lm(r1~-1+r2))
coef(lm(r1~r2))
coef(lm(r1~0+r2))
ry <- residuals(lm(l_wage ~ l_labor))
rx2 <- residuals(lm(l_labor ~ l_sch))
rx3 <- residuals(lm(l_labor ~ l_othwag))
coef(lm(ry ~ 0 + rx2 + rx3))
ry <- residuals(lm(l_wage ~ l_labor))
rx2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
coef(lm(ry ~ 0 + rx2))
fit2$coefficients
0.9123951 -0.7998652
ry <- residuals(lm(l_wage ~ l_labor))
rx2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
coef(lm(ry ~ 0 + rx2))
fit2$coefficients
rx2 <- residuals(lm(l_labor ~ l_sch))
rx3 <- residuals(lm(l_labor ~ l_othwag))
ry <- residuals(lm(l_wage ~ l_labor))
#rx2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
rx2 <- residuals(lm(l_labor ~ l_sch))
rx3 <- residuals(lm(l_labor ~ l_othwag))
coef(lm(ry ~ 0 + rx2 + rx3))
r <- rx2 + rx3
coef(lm(ry ~ 0 + r))
coef(lm(ry ~ 0 + rx2 + rx3))
coef(lm(y~x1+x2))
x1 <- rnorm(100)
x2 <- rnorm(100)
x3 <- rnorm(100)
y <- 1 + 2*x1 - 5*x2 + 8*x3 + rnorm(100)
coef(lm(y~x1+x2+x3))
y <- 1 + 2*x1 + 5*x2 + 8*x3 + rnorm(100)
coef(lm(y~x1+x2+x3))
y1 <- 1 + 2*x1 + 5*x2 + rnorm(100)
r1 <- residuals(lm(y~x2))
r2 <- residuals(lm(x1~x2))
coef(lm(y~x1+x2))
coef(lm(r1~0+r2))
y <- 1 + 2*x1 + 5*x2 + 8*x3 + rnorm(100)
r1 <- residuals(lm(y~x2+x3))
r2 <- residuals(lm(x1~x2+x3))
r1
r2
coef(lm(y~x1+x2+x3))
coef(lm(r1~0+r2))
ry <- residuals(lm(l_wage ~ l_sch + l_othwag))
rx2 <- residuals(lm(l_labor ~ ry <- residuals(lm(l_wage ~ l_sch + l_othwag))))
coef(lm(ry ~ 0 + rx2))
fit2$coefficients
ry <- residuals(lm(l_wage ~ l_sch + l_othwag))
rx2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
coef(lm(ry ~ 0 + rx2))
coef(lm(ry ~ rx2))
coef(lm(ry ~ 0 + rx2))
r1 <- residuals(lm(y~x2+x3))
r2 <- residuals(lm(x1~x2+x3))
coef(lm(y~x1+x2+x3))
r1 <- residuals(lm(y~x2))
r2 <- residuals(lm(x1~x2))
coef(lm(r1~0+r2))
y <- 1 - 2*x1 + 5*x2 + 8*x3 + rnorm(100)
r1 <- residuals(lm(y~x2+x3))
r2 <- residuals(lm(x1~x2+x3))
coef(lm(r1~0+r2))
ry_x23 <- residuals(lm(y~x2+x3))
rx1_x23 <- residuals(lm(x1~x2+x3))
coef(lm(ry_x23~0+rx1_x23))
ry_x23 <- residuals(lm(l_wage ~ l_sch + l_othwag))
#rx2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
rx1_x23 <- residuals(lm(l_labor ~ l_sch + l_othwag))
coef(lm(ry_x23 ~ 0 + rx1_x23))
attach(l_raw)
l_labor-l_labor_hat
ry_x23 <- residuals(lm(l_wage ~ l_sch + l_othwag))
#rx2 <- residuals(lm(l_labor ~ l_sch + l_othwag))
rx1_x23 <- residuals(lm(l_labor_hat ~ l_sch + l_othwag))
coef(lm(ry_x23 ~ 0 + rx1_x23))
summary(tsls(l_wage~l_labor + l_sch + l_othwag))
summary(tsls(l_wage~l_labor + l_sch + l_othwag
, ~ l_sch + l_othwag + l_land + l_RE + l_othexp))
fit2$coefficients
ry_x23 <- residuals(lm(l_wage ~ l_sch + l_othwag))
ry <- residuals(lm(l_wage ~ l_sch + l_othwag))
rx2 <- residuals(lm(l_labor_hat ~ l_sch + l_othwag))
coef(lm(ry ~ 0 + rx2))
ry <- residuals(lm(y~x2+x3))
rx23 <- residuals(lm(x1~x2+x3))
coef(lm(ry~0+rx23))
ry <- residuals(lm(l_wage ~ l_sch + l_othwag))
rx2 <- residuals(lm(l_labor_hat ~ l_sch + l_othwag))
coef(lm(ry ~ 0 + rx2))
summary(tsls(l_wage~l_labor + l_sch + l_othwag
, ~ l_sch + l_othwag + l_land + l_RE + l_othexp))
coef(tsls(l_wage~l_labor + l_sch + l_othwag
, ~ l_sch + l_othwag + l_land + l_RE + l_othexp))
rank(1:2)
x = matrix(1:9,3,3)
rank(x)
attributes(x)
x$dim
dim(x)
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
rankMatrix(x)
qr(x)
qr(x)$rank
x
x = matrix(1:3,3,3)
x
rankMatrix(x)
qr(x)$rank
cbind(1, 0, 1:3)
rankMatrix(cbind(1, 0, 1:3)) # 2
qr(cbind(1, 0, 1:3))$rank # 2
rankMatrix(cbind(1, 0, 1:3))[1] # 2
x <- cbind(c(1,1,2), 0, 1:3)
rankMatrix(x)[1] # 2
x <- cbind(c(1,1,2), c(1,2,2), 1:3)
rankMatrix(x)[1] # 2
<- cbind(c(1,1,2), c(1,2,2), 1:3)
x <- cbind(c(1,1,2), c(1,2,2), 1:3)
x
x <- cbind(c(1,1,2), c(2,2,2), 1:3)
x
x <- cbind(c(1,1,2), c(2,2,2), 1:3)
x
rankMatrix(x)[1] # 2
x <- cbind(c(1,1,1), c(2,2,2), 1:3)
x
rankMatrix(x)[1] # 2
x <- t(cbind(c(1,1,1), c(2,2,2), 1:3))
x
rankMatrix(x)[1]
x <- t(cbind(c(1,1,1), 0, 1:3))
x
rankMatrix(x)[1]
x <- t(cbind(c(1,1,1), 0, 1:3))
x
x <- t(cbind(c(1,3,7),c(0,0,2), 0))
x
rankMatrix(x)[1]
x <- (cbind(c(1,0,0),c(3,0,)))
x
x <- (cbind(c(1,0,0),c(3,0,0)))
x
rankMatrix(x)[1]
pnorm(0)
pnorm(2)
ln(-1)
log(-1)
log(2/(1-2))
(e^2)/(1+e^2)
(exp(2))/(1+exp(2))
pnorm(2)
pnorm(0)
pnorm(-999)
pnorm(999)
pnorm(20)
pnorm(2)
?par
?layout
setwd('~/Dropbox/MSPA/predict 412/project/')
raw <- read.csv('ticdata2000.csv')
head(raw)
summary(raw)
str(raw)
raw$caravan <- factor(raw$caravan)
str(raw)
levels(raw$caravan)
install.packages("randomForest")
summary(raw)
names(raw)
grep('^m', names(raw))
names(raw)[grep('^m', names(raw))]
cols <- names(data)[grep('^m', names(raw))]
data[,cols]
cols
data <- raw
cols <- names(data)[grep('^m', names(raw))]
cols
data[,cols]
sapply(data[,cols], sum)
tapply(data[,cols], sum)
lapply(data[,cols], sum)
sapply(data[,cols], as.factor)
str(data)
lapply(data[,cols], as.factor)
data[,cols] <- sapply(data[,cols], as.factor)
str(data)
cols <- names(data)[grep('^m', names(raw))]
data <- raw
cols <- names(data)[grep('^m', names(raw))]
data[,cols]
data[,cols] <- lapply(data[,cols], as.factor)
str(data)
rm(list=ls())
data <- as.data.frame(read.csv("/ticdata2000.csv"))
getwd()
data <- as.data.frame(read.csv("./ticdata2000.csv"))
head(data)
# convert the demographic data to categorical/factor
cols <- names(data)[grep('^m', names(raw))]
data[,cols] <- lapply(data[,cols], as.factor)
str(data)
cols
names(data)
cols <- names(data)[grep('^m', names(data))]
data[,cols] <- lapply(data[,cols], as.factor)
str(data)
# check for missing data
rows  <- nrow(data)
compcases  <- sum(complete.cases(data))
# if this next logical test returns FALSE, data is missing.
rows==compcases
# no issues, all rows are complete
# Attribute 86, "CARAVAN:Number of mobile home policies", is the target variable.
summary(data$caravan)
posresp  <- sum(data$caravan)
posprop  <- round((posresp/rows), digits =4)
posprop
cols <- c(cols, 'caravan')
data <- as.data.frame(read.csv("./ticdata2000.csv"))
head(data)
# convert the demographic data to categorical/factor
cols <- names(data)[grep('^m', names(data))]
cols <- c(cols, 'caravan')
data[,cols] <- lapply(data[,cols], as.factor)
str(cols)
str(data)
summary(data$caravan)
posresp  <- sum(data$caravan)
posprop  <- round((posresp/rows), digits =4)
posprop
# so positive response (purchased a mobile home policy) is low: ~6%
# set up corr test function
cor.mtest <- function(mat, conf.level = 0.90){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
library(corrplot)
corrmat <- cor(data, method="pearson", use="complete.obs")
corrmat
res1 <- cor.mtest(data,0.90)
corrmat <- cor(data, method="pearson", use="complete.obs")
head(data)
str(data)
require(randomForest)
install.packages(randomForest)
install.packages("randomForest")
setwd('./../Predict412/')
setwd('./../assignments/programming1/')
library(MMST)
install.packages("MMST")
library(MMST)
data(wine)
source('~/.active-rstudio-document', echo=TRUE)
head(wine)
library(ggplot2)
summary(wine)
ggplot(wine, aes(x=Alcohol)) +
geom_bar
ggplot(wine, aes(x=Alcohol)) +
geom_bar()
ggplot(wine, aes(x=Alcohol, fill=class)) +
geom_bar()
ggplot(wine, aes(x=wine[,1], fill=class)) +
geom_bar()
ggplot(wine, aes(x=wine[,1], fill=class)) +
geom_bar() +
labs(x=names(wine)[1])
for(i in 1:5){
for(i in 1:5){
ggplot(wine, aes(x=wine[,i], fill=class)) +
geom_bar() +
labs(x=names(wine)[i])
}
for(i in 1:5){
p <- ggplot(wine, aes(x=wine[,i], fill=class)) +
geom_bar() +
labs(x=names(wine)[i])
print(p)
}
density(wine$Alcohol)
plot(density(wine$Alcohol))
hist(wine$Alcohol)
plot(density(wine$Alcohol))
for(i in 1:1){
p <- ggplot(wine, aes(x=wine[,i], fill=class)) +
geom_density() +
labs(x=names(wine)[i])
print(p)
}
for(i in 1:1){
p <- ggplot(wine, aes(x=wine[,i], fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
}
for(i in 1:1){
p <- ggplot(wine, aes(x=wine[,i], fill=class, alpha=0.5)) +
geom_density(aes()) +
labs(x=names(wine)[i])
print(p)
}
for(i in 1:1){
p <- ggplot(wine, aes(x=wine[,i], fill=class) +
geom_density(aes(alpha=0.5))) +
labs(x=names(wine)[i])
print(p)
}
for(i in 1:1){
p <- ggplot(wine, aes(x=wine[,i], fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
}
for(i in 1:1){
p <- ggplot(wine, aes(x=wine[,i], fill=factor(class))) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
}
head(wine)
str(wine)
ncol(wine)
for(i in 1:(ncol(wine)-2)){
p <- ggplot(wine, aes(x=wine[,i], fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
}
library(ggplot2)
str(wine)
summary(wine)
head(wine)
str(wine)
summary(wine)
for(i in 1:(ncol(wine)-2)){
hist(wine[,i], xlab=names(wine)[i])
}
for(i in 1:(ncol(wine)-2)){
hist(wine[,i], xlab=names(wine)[i], main=paste('Histogram of', names(wine)[i]))
}
for(i in 1:(ncol(wine)-2)){
hist(wine[,i], xlab=names(wine)[i], main=paste('Histogram of', names(wine)[i]))
}
hist(log(wine$MalicAcid))
wine$l_MalicAcid <- log(wine$MalicAcid)
qplot(wine, aes(x=l_MalicAcid, fill=class))
p <- ggplot(wine, aes(x=l_MalicAcid, fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
wine$l_Color <- log(wine$Color)
p <- ggplot(wine, aes(x=l_Color, fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
hist(wine$Color)
hist(wine$l_Color)
wine$l_Color <- log(wine$Color)
p <- ggplot(wine, aes(x=l_Color, fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
p <- ggplot(wine, aes(x=l_Color, fill=class)) +
geom_density(aes(alpha=0.5)) +
labs(x=names(wine)[i])
print(p)
